// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String
  salt           String
  hash           String
  role           Role
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  BillingAddress BillingAddress[]
  Order          Order[]
}

model Tag {
  id   String       @id @default(cuid())
  name String       @unique
  tags ProductTag[]
}

model Category {
  id            String     @id @default(cuid())
  name          String     @unique
  isSubcat      Boolean    @default(false)
  parent        Category?  @relation(name: "subcat-relation", fields: [parentId], references: [id])
  subcategories Category[] @relation("subcat-relation")
  parentId      String?
  products      Product[]
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Product {
  id          String            @id @default(cuid())
  name        String
  description String?
  longDesc    String?
  onSale      Boolean
  ProductTag  ProductTag[]
  Category    Category?         @relation(fields: [categoryId], references: [id])
  Brand       Brand?            @relation(fields: [brandId], references: [id])
  categoryId  String?
  brandId     String?
  Promotion   Promotion?        @relation(fields: [promotionId], references: [id])
  promotionId String?
  OrderItem   OrderItem[]
  variants    ProductVariant[]
  properties  ProductProperty[]
  reviews     ProductReview[]
}

model ProductProperty {
  id        String  @id @default(cuid())
  name      String
  value     String
  Product   Product @relation(fields: [productId], references: [id])
  productId String
}

model VariantProperty {
  id        String         @id @default(cuid())
  name      String
  value     String
  variant   ProductVariant @relation(fields: [productId], references: [id])
  productId String
}

model ProductReview {
  id        String   @id @default(cuid())
  name      String
  email     String
  rating    Float
  comment   String
  Product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model ProductVariant {
  id              String            @id @default(cuid())
  name            String
  price           Float
  quantity        Int
  isDefault       Boolean           @default(false)
  Product         Product           @relation(fields: [productId], references: [id])
  productId       String
  images          String[]
  VariantProperty VariantProperty[]
}

model ProductTag {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String
  productId String
}

model BillingAddress {
  id        String   @id @default(cuid())
  name      String
  email     String
  address   String
  address2  String?
  street    String
  city      String
  state     String
  zip       String
  country   String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Promotion {
  id          String    @id @default(cuid())
  name        String
  description String
  off         Float
  startDate   DateTime
  endDate     DateTime
  products    Product[]
}

model OrderItem {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  DELIVERED
}

model Order {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  status    OrderStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())

}
